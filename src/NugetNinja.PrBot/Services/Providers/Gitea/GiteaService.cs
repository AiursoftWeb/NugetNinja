using System.Net;
using System.Text;
using System.Text.Json;
using Aiursoft.NugetNinja.Core;
using Microsoft.Extensions.Logging;

namespace Aiursoft.NugetNinja.PrBot;

public class GiteaService : IVersionControlService
{
    private readonly HttpClient _httpClient;
    private readonly ILogger<GiteaService> _logger;

    public GiteaService(
        HttpClient httpClient,
        ILogger<GiteaService> logger)
    {
        _httpClient = httpClient;
        _logger = logger;
    }

    public string GetName()
    {
        return "Gitea";
    }

    public async Task<bool> RepoExists(string endPoint, string orgName, string repoName, string patToken)
    {
        _logger.LogInformation($"Getting if repository exists based on org: {orgName}, repo: {repoName}...");
        try
        {
            var endpoint = $@"{endPoint}/repos/{orgName}/{repoName}";
            await SendHttp(endpoint, HttpMethod.Get, patToken);
            return true;
        }
        catch
        {
            return false;
        }
    }

    public async IAsyncEnumerable<Repository> GetMyStars(string endPoint, string userName, string patToken)
    {
        _logger.LogInformation($"Listing all stared repositories based on user's name: {userName}...");
        for (var i = 1;; i++)
        {
            var endpoint = $@"{endPoint}/users/{userName}/starred?page={i}";
            var currentPageItems = await SendHttpAndGetJson<List<Repository>>(endpoint, HttpMethod.Get, patToken);
            if (!currentPageItems.Any()) yield break;

            foreach (var repo in currentPageItems) yield return repo;
        }
    }

    public async Task ForkRepo(string endPoint, string org, string repo, string patToken)
    {
        _logger.LogInformation($"Forking repository on Gitea with org: {org}, repo: {repo}...");

        var endpoint = $@"{endPoint}/repos/{org}/{repo}/forks";
        await SendHttp(endpoint, HttpMethod.Post, patToken);
    }

    public async Task<IEnumerable<PullRequest>> GetPullRequests(string endPoint, string org, string repo, string head,
        string patToken)
    {
        _logger.LogInformation($"Getting pull requests on Gitea with org: {org}, repo: {repo}...");

        var endpoint = $@"{endPoint}/repos/{org}/{repo}/pulls?head={head}";
        return await SendHttpAndGetJson<List<PullRequest>>(endpoint, HttpMethod.Get, patToken);
    }

    public async Task CreatePullRequest(string endPoint, string org, string repo, string head, string @base,
        string patToken)
    {
        _logger.LogInformation($"Creating a new pull request on Gitea with org: {org}, repo: {repo}...");

        var endpoint = $@"{endPoint}/repos/{org}/{repo}/pulls";
        await SendHttp(endpoint, HttpMethod.Post, patToken, new
        {
            title = "Auto dependencies upgrade by bot.",
            body = @"
Auto dependencies upgrade by bot. This is automatically generated by bot.

The bot tries to fetch all possible updates and modify the project files automatically.

This pull request may break or change the behavior of this application. Review with cautious!",
            head,
            @base
        });
    }

    public string GetPushPath(Server connectionConfiguration, Repository repo)
    {
        var pushPath = string.Format(connectionConfiguration.PushEndPoint,
                           $"{connectionConfiguration.UserName}:{connectionConfiguration.Token}")
                       + $"/{connectionConfiguration.UserName}/{repo.Name}.git";
        return pushPath;
    }

    private async Task<string> SendHttp(string endPoint, HttpMethod method, string patToken, object? body = null)
    {
        var request = new HttpRequestMessage(method, endPoint)
        {
            Content = body != null
                ? new StringContent(JsonSerializer.Serialize(body), Encoding.UTF8, "application/json")
                : new FormUrlEncodedContent(new Dictionary<string, string>())
        };

        request.Headers.Add("Authorization", $"token {patToken}");
        request.Headers.Add("accept", "application/json");
        request.Headers.Add("User-Agent", $"Aiursoft.NugetNinja {Helper.AppVersion}");

        var response = await _httpClient.SendAsync(request);
        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (HttpRequestException e)
        {
            var resultContent = e.Message + await response.Content.ReadAsStringAsync();
            throw new WebException(resultContent);
        }

        var json = await response.Content.ReadAsStringAsync();
        return json;
    }

    private async Task<T> SendHttpAndGetJson<T>(string endPoint, HttpMethod method, string patToken)
    {
        var json = await SendHttp(endPoint, method, patToken);
        var repos = JsonSerializer.Deserialize<T>(json) ??
                    throw new WebException($"The remote server returned non-json content: '{json}'");
        return repos;
    }
}